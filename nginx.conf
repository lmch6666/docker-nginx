    upstream myserver {
        # 默认是 轮询  按时间分配
        # 权重 weight 越高 被分配的客户端越多 默认为1
        # ip_hash 按ip 分配
        # fair 按后端的平均响应时间分配
        # server 192.167.4.32:5000 weight=10;
        # server 192.167.4.32:8000 weight=5;
        ip_hash;
        server 192.167.4.32:5000;
        server 192.167.4.32:8000;
    }

    upstream static{
        server  192.167.4.32:5000;
    }

    upstream dynamic{
        server  192.167.4.32:4000;
    }

    server { #server块
            # server全局块
        listen       80; #监听端口
        server_name  localhost; # 监听地址
        
        root   /usr/share/nginx/html;
        index  index.html index.htm;
        expires    10m;
                # 静态服务器资源请求 拦截 转向
        location ~ .*\.(gif|jpg|png|js|css)$ {
            # proxy_cache cache_one;
            proxy_pass http://dynamic;
            proxy_cache_valid 200 304 10m;
            expires 3d;
            # proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504
        }
        # 动态服务器资源请求 拦截 转向
        location ~ .*\.(php|jsp)$ {
            # proxy_cache cache_one;
            proxy_pass http://static;
            proxy_cache_valid 200 304 10m;
            expires 3d;
            # proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504
        }


        location / {  #location块
            # /html目录
            # root html

            # 缓存配置
            # expires 3600;

            # 此时通过 docker-compose 打开地址，可发现添加了一个新的 X-Hello 响应头
            add_header X-Hello sheshi1;

            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Headers *;
            add_header Access-Control-Allow-Methods 'GET POST PUT DELETE';
            add_header Access-Control-Allow-Credentials true;
            # 内容压缩
            gzip on;
            # 压缩类型
            gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            # 请求转向
            # proxy_pass http://$http_host$request_uri;
        
            # 访问外网的客户端上执行的命令
            # export http_proxy=http://address:port;
            # redirect off;
            # rewrite ^(.*)$ /index.html;
        }
            # ~ 表示uri包含正则表达式 ，且区分大小写
            # ~* 表示uri包含正则表达式 ，不区分大小写
            # = 表示uri不包含正则表达式 要求严格匹配
        location ~/example1/ {
            proxy_pass http://127.0.0.1:5000;
        }

        location ~/example2/ {
            #负载均衡策略
            proxy_pass http://myserver;
        }

        location ~ \.(gif|jpg|png|js|css)$ {
            proxy_redirect off;
            proxy_pass http://127.0.0.1:5000; #如果没有则转向请求
            # proxy_cache cache_one;
            proxy_cache_valid 200 304 10m;  #针对不同的http状态码设置不同的缓存时间
            expires 3d;
            # proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504
        }

    }

    server{
        # listen 80;
        # server_name localhost;
        # location / {
        #     proxy_pass http://
    }
